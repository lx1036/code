/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s-lx1036/k8s/network/loadbalancer/bgplb/pkg/apis/bgplb.k9s.io/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BgpConfLister helps list BgpConves.
// All objects returned here must be treated as read-only.
type BgpConfLister interface {
	// List lists all BgpConves in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.BgpConf, err error)
	// BgpConves returns an object that can list and get BgpConves.
	BgpConves(namespace string) BgpConfNamespaceLister
	BgpConfListerExpansion
}

// bgpConfLister implements the BgpConfLister interface.
type bgpConfLister struct {
	indexer cache.Indexer
}

// NewBgpConfLister returns a new BgpConfLister.
func NewBgpConfLister(indexer cache.Indexer) BgpConfLister {
	return &bgpConfLister{indexer: indexer}
}

// List lists all BgpConves in the indexer.
func (s *bgpConfLister) List(selector labels.Selector) (ret []*v1.BgpConf, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BgpConf))
	})
	return ret, err
}

// BgpConves returns an object that can list and get BgpConves.
func (s *bgpConfLister) BgpConves(namespace string) BgpConfNamespaceLister {
	return bgpConfNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BgpConfNamespaceLister helps list and get BgpConves.
// All objects returned here must be treated as read-only.
type BgpConfNamespaceLister interface {
	// List lists all BgpConves in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.BgpConf, err error)
	// Get retrieves the BgpConf from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.BgpConf, error)
	BgpConfNamespaceListerExpansion
}

// bgpConfNamespaceLister implements the BgpConfNamespaceLister
// interface.
type bgpConfNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BgpConves in the indexer for a given namespace.
func (s bgpConfNamespaceLister) List(selector labels.Selector) (ret []*v1.BgpConf, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BgpConf))
	})
	return ret, err
}

// Get retrieves the BgpConf from the indexer for a given namespace and name.
func (s bgpConfNamespaceLister) Get(name string) (*v1.BgpConf, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("bgpconf"), name)
	}
	return obj.(*v1.BgpConf), nil
}
