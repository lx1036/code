package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/scheme"
)

var (
	// GroupVersion is group version used to register these objects
	GroupVersion = schema.GroupVersion{Group: "lvs.lx1036.io", Version: "v1"}

	// SchemeBuilder is used to add go types to the GroupVersionKind scheme
	SchemeBuilder = &scheme.Builder{GroupVersion: GroupVersion}

	AddToScheme = SchemeBuilder.AddToScheme
)

func init() {
	SchemeBuilder.Register(&LvsPod{}, &LvsPodList{})
}

type LvsPodList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LvsPod `json:"items"`
}

func (in *LvsPodList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
func (in *LvsPodList) DeepCopy() *LvsPodList {
	if in == nil {
		return nil
	}
	out := new(LvsPodList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LvsPodList) DeepCopyInto(out *LvsPodList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LvsPod, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// LvsPod is the Schema for the lvspods API
type LvsPod struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   LvsPodSpec   `json:"spec,omitempty"`
	Status LvsPodStatus `json:"status,omitempty"`
}

func (in *LvsPod) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
func (in *LvsPod) DeepCopyInto(out *LvsPod) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status
}
func (in *LvsPod) DeepCopy() *LvsPod {
	if in == nil {
		return nil
	}
	out := new(LvsPod)
	in.DeepCopyInto(out)
	return out
}

type LvsPodStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
}

func (in *LvsPodStatus) DeepCopyInto(out *LvsPodStatus) {
	*out = *in
}
func (in *LvsPodStatus) DeepCopy() *LvsPodStatus {
	if in == nil {
		return nil
	}
	out := new(LvsPodStatus)
	in.DeepCopyInto(out)
	return out
}

type LvsPodSpec struct {
	Deployments []Deployment `json:"deployments"`
}

func (in *LvsPodSpec) DeepCopy() *LvsPodSpec {
	if in == nil {
		return nil
	}
	out := new(LvsPodSpec)
	in.DeepCopyInto(out)
	return out
}
func (in *LvsPodSpec) DeepCopyInto(out *LvsPodSpec) {
	*out = *in
	if in.Deployments != nil {
		in, out := &in.Deployments, &out.Deployments
		*out = make([]Deployment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

type Deployment struct {
	DeploymentName string `json:"deploymentName"`
	ServiceName    string `json:"serviceName"`
	Vips           []Vip  `json:"vips"`
}

func (in *Deployment) DeepCopy() *Deployment {
	if in == nil {
		return nil
	}
	out := new(Deployment)
	in.DeepCopyInto(out)
	return out
}
func (in *Deployment) DeepCopyInto(out *Deployment) {
	*out = *in
	if in.Vips != nil {
		in, out := &in.Vips, &out.Vips
		*out = make([]Vip, len(*in))
		copy(*out, *in)
	}
}

type Vip struct {
	Vip        string `json:"vip"`
	VipPort    int    `json:"vipPort"`
	TargetPort int    `json:"targetPort"`
}

func (in *Vip) DeepCopy() *Vip {
	if in == nil {
		return nil
	}
	out := new(Vip)
	in.DeepCopyInto(out)
	return out
}
func (in *Vip) DeepCopyInto(out *Vip) {
	*out = *in
}
