// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdp_basic returns the embedded CollectionSpec for xdp_basic.
func loadXdp_basic() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_basicBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_basic: %w", err)
	}

	return spec, err
}

// loadXdp_basicObjects loads xdp_basic and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_basicObjects
//	*xdp_basicPrograms
//	*xdp_basicMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_basicObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_basic()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_basicSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_basicSpecs struct {
	xdp_basicProgramSpecs
	xdp_basicMapSpecs
}

// xdp_basicSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_basicProgramSpecs struct {
	XdpDropFunc *ebpf.ProgramSpec `ebpf:"xdp_drop_func"`
	XdpPassFunc *ebpf.ProgramSpec `ebpf:"xdp_pass_func"`
}

// xdp_basicMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_basicMapSpecs struct {
}

// xdp_basicObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_basicObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_basicObjects struct {
	xdp_basicPrograms
	xdp_basicMaps
}

func (o *xdp_basicObjects) Close() error {
	return _Xdp_basicClose(
		&o.xdp_basicPrograms,
		&o.xdp_basicMaps,
	)
}

// xdp_basicMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_basicObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_basicMaps struct {
}

func (m *xdp_basicMaps) Close() error {
	return _Xdp_basicClose()
}

// xdp_basicPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_basicObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_basicPrograms struct {
	XdpDropFunc *ebpf.Program `ebpf:"xdp_drop_func"`
	XdpPassFunc *ebpf.Program `ebpf:"xdp_pass_func"`
}

func (p *xdp_basicPrograms) Close() error {
	return _Xdp_basicClose(
		p.XdpDropFunc,
		p.XdpPassFunc,
	)
}

func _Xdp_basicClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_basic_bpfel.o
var _Xdp_basicBytes []byte
